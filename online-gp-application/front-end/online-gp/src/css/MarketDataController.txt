package com.online.solcryptomonitor.Controller;

import java.util.List;
import java.util.Map;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.online.solcryptomonitor.Model.Candlestick;
import com.online.solcryptomonitor.Model.OrderBook;
import com.online.solcryptomonitor.Service.BinanceWebSocketService;
import com.online.solcryptomonitor.Service.MarketDataService;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@RestController
@RequestMapping("/api/marketdata")
@CrossOrigin(origins = "http://localhost:3001")
public class MarketDataController {

    @Autowired
    private MarketDataService marketDataService;
    
    @Autowired
    private BinanceWebSocketService binanceWebSocketService;

    private static final Logger logger = LoggerFactory.getLogger(MarketDataController.class);

//    // Fetches the candlesticks and handles optional empty returns
//    @GetMapping("/candlesticks")
//    public ResponseEntity<?> getCandlesticks() {
//        Optional<List<Candlestick>> candlesticks = binanceWebSocketService.fetchCandlestickData();
//        
//        if (candlesticks.isPresent()) {
//            List<Candlestick> data = candlesticks.get();
//            if (data.isEmpty()) {
//                logger.info("No candlestick data available.");
//                return ResponseEntity.status(HttpStatus.NO_CONTENT).body("No candlestick data available.");
//            }
//            return ResponseEntity.ok(data);
//        } else {
//            logger.error("Error fetching candlestick data.");
//            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error fetching candlestick data.");
//        }
//    }
//
//    // Fetches the order book data
//    @GetMapping("/orderbook")
//    public ResponseEntity<?> getOrderBookData() {
//        try {
//            OrderBook orderBookData = marketDataService.getOrderBookData();
//            if (orderBookData != null) {
//                return ResponseEntity.ok(orderBookData);
//            } else {
//                logger.warn("No order book data available.");
//                return ResponseEntity.status(HttpStatus.NO_CONTENT).body("No order book data available.");
//            }
//        } catch (Exception e) {
//            logger.error("Error fetching order book data", e);
//            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error fetching order book data.");
//        }
//    }
//    
    @GetMapping("/start-websocket")
    public ResponseEntity<String> startWebSocketConnections() {
        binanceWebSocketService.connectToCandlestickWebSocket();
        binanceWebSocketService.connectToOrderBookWebSocket();
        
        return ResponseEntity.ok("Binance WebSocket connections started.");
    }
    
    @GetMapping("/candlesticks")
    public ResponseEntity<List<Map<String, Object>>> getCandlesticks() {
        try {
            // Introduce a small delay for testing purposes
            Thread.sleep(2000); // Delay in milliseconds
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        List<Map<String, Object>> candlestickData = binanceWebSocketService.getCandlesticks();

        if (candlestickData.isEmpty()) {
            System.out.println("No candlestick data available.");
            return ResponseEntity.status(HttpStatus.NO_CONTENT).body(candlestickData);
        }

        System.out.println("Returning candlestick data: " + candlestickData);
        return ResponseEntity.ok(candlestickData);
    }

    @GetMapping("/orderbook")
    public ResponseEntity<Map<String, List<Map<String, Object>>>> getOrderBookData() {
        Map<String, List<Map<String, Object>>> orderBookData = binanceWebSocketService.getOrderBookData();

        if (orderBookData.isEmpty() || (orderBookData.get("bids").isEmpty() && orderBookData.get("asks").isEmpty())) {
            System.out.println("No order book data available.");
            return ResponseEntity.status(HttpStatus.NO_CONTENT).body(orderBookData);
        }

        System.out.println("Returning order book data: " + orderBookData);
        return ResponseEntity.ok(orderBookData);
    }

}
