import React, { useEffect, useState } from 'react';
import { Line } from 'react-chartjs-2';
import {
    Chart as ChartJS,
    CategoryScale,
    LinearScale,
    PointElement,
    LineElement,
    Title,
    Tooltip,
    Legend
} from 'chart.js';

ChartJS.register(
    CategoryScale,
    LinearScale,
    PointElement,
    LineElement,
    Title,
    Tooltip,
    Legend
);

const CandlestickChart = () => {
    const [candlesticks, setCandlesticks] = useState([]);
    const [orderBook, setOrderBook] = useState({ bids: [], asks: [] });

    // Function to fetch candlestick data
    const fetchCandlesticks = async () => {
        try {
            const response = await fetch('http://localhost:8081/api/marketdata/candlesticks');
            if (!response.ok) {
                throw new Error('Received empty response for candlestick data');
            }
            const data = await response.json();
            setCandlesticks(data);
        } catch (error) {
            console.error('Error fetching candlestick data:', error);
        }
    };

    // Function to fetch order book data
    const fetchOrderBook = async () => {
        try {
            const response = await fetch('http://localhost:8081/api/marketdata/orderbook');
            if (!response.ok) {
                throw new Error('Received empty response for order book data');
            }
            const data = await response.json();
            setOrderBook(data);
        } catch (error) {
            console.error('Error fetching order book data:', error);
        }
    };

    useEffect(() => {
        // Fetch data every second
        const intervalId = setInterval(() => {
            fetchCandlesticks();
            fetchOrderBook();
        }, 1000);

        // Clean up the interval on component unmount
        return () => clearInterval(intervalId);
    }, []);

    // Chart data
    const chartData = {
        labels: candlesticks.map((c) => new Date(c.timestamp).toLocaleTimeString()),
        datasets: [
            {
                label: 'Close Price',
                //data: candlesticks.map((c) => c.close),
                data: candlesticks.map((c) => (
                    c.close
                )),
                borderColor: 'rgba(0, 192, 192, 1)',
                color: {
                    up: 'rgba(0, 200, 0, 0.8)',
                    down: 'rgba(200, 0, 0, 0.8)',
                    unchanged: 'rgba(0, 0, 200, 0.8)'
                },
                fill: false,
                pointRadius: 1, // Adjust point size for a bigger view
            },
        ],
    };

    // Chart options to customize x-axis, y-axis, and make the chart larger
    const chartOptions = {
        maintainAspectRatio: false,
        animation: {
            duration: 0, 
            easing: 'linear', // Use an easing function for smoother animations
        },
        scales: {
            x: {
                ticks: {
                    maxRotation: 45,
                    minRotation: 30,
                    font: {
                        size: 14, // Increase x-axis label size
                    },
                },
                grid: {
                    display: false, // Optional: Disable grid lines on the x-axis for a cleaner look
                },
            },
            y: {
                ticks: {
                    font: {
                        size: 14, // Increase y-axis label size
                    },
                },
                grid: {
                    display: true, // Optional: Enable grid lines on the y-axis for reference
                    drawBorder: false, // Disable the border line on the y-axis
                },
            },
        },
        elements: {
            line: {
                tension: 0.5, // Smooth the line slightly
            },
        },
        plugins: {
            tooltip: {
                mode: 'index',
                intersect: false,
            },
        },
    };
    

    return (
        <div>
            <header className="header">
                <nav className="navbar">
                    <div className="nav-links">
                        <h1>Triremme Trading</h1>
                    </div>
                </nav>
            </header>
            
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>
                {/* Chart Container */}
                <div style={{ flex: '0 0 60%', marginRight: '20px', height: '600px' , width : '1000px' }}>
                    <h2>Candlestick Chart (SOL/USDT)</h2>
                    <Line data={chartData} options={chartOptions} />
                </div>

                {/* Order Book Container */}
                <div style={{ flex: '0 0 40%', height: '600px', overflowY: 'scroll', border: '1px solid #ccc', padding: '10px' }}>
                    <h2>Order Book (SOL/USDT)</h2>
                    <div>
                        <h4>Bids</h4>
                        {orderBook.bids.length > 0 ? (
                            orderBook.bids.map((bid, index) => (
                                <div key={index}>{bid.price} / {bid.quantity}</div>
                            ))
                        ) : (
                            <div>No bids available</div>
                        )}
                    </div>
                    <div>
                        <h4>Asks</h4>
                        {orderBook.asks.length > 0 ? (
                            orderBook.asks.map((ask, index) => (
                                <div key={index}>{ask.price} / {ask.quantity}</div>
                            ))
                        ) : (
                            <div>No asks available</div>
                        )}
                    </div>
                </div>
            </div>
        </div>
    );
};

export default CandlestickChart;
